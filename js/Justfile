# Install just on Ubuntu:
# curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin/
# Install just on macOS:
# brew install just
# Install gum on Ubuntu: (from the docs: https://github.com/charmbracelet/gum#installation)
# sudo mkdir -p /etc/apt/keyrings
# curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
# echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | sudo tee /etc/apt/sources.list.d/charm.list
# sudo apt update && sudo apt install gum
# Install gum on macOS:
# brew install gum

# Set HOSTALIAS for docker compose commands
export HOSTALIAS := `hostname -s`
# Set GIT_REVISION for docker build args (only needed during build)
export GIT_REVISION := `git describe --always --dirty`
export FROM_JUSTFILE := "true"

# weird escape for Just, could not get octal 33 any other way
green := `printf "\033[32m"`
red := `printf "\033[31m"`
reset := `printf "\033[0m"`
green_check := green + "✔" + reset
red_xmark := red + "✗" + reset

# centralize the format command to style (theme=lignt)
gum_fmt_cmd := "gum format --theme=light"

# List all available commands
default:
    @just --list

# Build local Docker containers (--pull)
build:
    #!/usr/bin/env bash
    echo "# Building Containers (--pull)" | {{ gum_fmt_cmd }}
    docker compose build --pull

# Check and test Docker base image tags and their SHA equivalents
pin-docker-tags:
    #!/usr/bin/env bash
    echo "# Docker base image tags and their SHA equivalents" | {{ gum_fmt_cmd }}
    ./scripts/pin-docker-tags.sh

# Start local Docker containers
start:
    #!/usr/bin/env bash
    echo "# Starting Containers" | {{ gum_fmt_cmd }}
    docker compose up -d

# Stop local Docker containers
stop:
    #!/usr/bin/env bash
    echo "# Stopping Containers" | {{ gum_fmt_cmd }}
    docker compose stop

# Show local Docker logs
logs:
    #!/usr/bin/env bash
    echo "# Showing Local Docker Logs" | {{ gum_fmt_cmd }}
    docker compose logs -f scrape

# Alias for check-status-remote
alias check := check-status-remote

# Check SSH connectivity to all remote hosts
check-ssh-remote:
    #!/usr/bin/env bash
    echo "# Checking SSH Connectivity" | {{ gum_fmt_cmd }}

    if ./scripts/check-ssh-remote.sh; then
        echo
        echo "{{ green_check }} - SSH key found and configured correctly"
    else
        echo
        echo "{{ red_xmark }} - SSH key check failed"
        exit 1
    fi

# Check versions and digests across all remote hosts
check-status-remote:
    #!/usr/bin/env bash
    echo "# Checking Status, Versions and Digests" | {{ gum_fmt_cmd }}
    ./scripts/check-status-remote.sh

# Show recent logs from all remote hosts
logs-remote:
    ./scripts/logs-remote.sh

# Subscribe to  NATS messages
nats-logs:
    nats -s nats.ts.imetrical.com sub -r "im.scrobblecast.>"

# Subscribe to NATS messages with pretty printing
nats-logs-pretty:
    nats -s nats.ts.imetrical.com sub -r "im.scrobblecast.>" | pino-pretty -a stamp -m title -S

# Show NATS monitoring dashboard
nats-top:
    nats-top -s nats.ts.imetrical.com

# Show NATS board interface
nats-board:
    npx natsboard --nats-mon-url http://nats.ts.imetrical.com:8222

# Sync (remotely) data between hosts
sync *ISODATE:
    ./scripts/sync-remote.sh {{ISODATE}}

# (just echo) Archive data/snapshots for /archive/mirror/scrobbleCast/
archive:
	@echo "Archiving data/snapshots for /archive"
	@echo tar cjvf scrobbleCast-data-snapshots-`date -u +%Y%m%d.%H%MZ`.tar.bz2 data/snapshots/monthly/
	@echo "scp -p scrobbleCast-data-snapshots-20.. maybe-galois:/Volumes/Space/archive/mirror/scrobbleCast/"
# Create database snapshot and upload to S3
snapshot:
    #!/usr/bin/env bash
    echo "# Taking a snapshot DB -> ./data/snapshots -> S3" | {{ gum_fmt_cmd }}
    ./scripts/snapshot-local.sh

# Restore database from snapshot
restore:
    #!/usr/bin/env bash
    echo "# Restoring from S3 -> ./data/snapshots -> DB" | {{ gum_fmt_cmd }}
    ./scripts/restore-local.sh

# Scrub DB digests (Local)
scrub:
    docker compose run --rm scrape node scrub.js

# Scrub DB digests (Remote)
scrub-remote:
    #!/usr/bin/env bash
    echo "# Scrub Digests on Remote Hosts" | {{ gum_fmt_cmd }}
    ./scripts/scrub-remote.sh

# Dedup DB, restore histories and calculate digests
dedup-digest:
    node dedup.js